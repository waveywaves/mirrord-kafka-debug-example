apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-consumer
  labels:
    app: kafka-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-consumer
  template:
    metadata:
      labels:
        app: kafka-consumer
    spec:
      containers:
      - name: consumer
        image:  docker.io/waveywaves/mirrord-kafka-debug-ex:latest
        imagePullPolicy: Always
        command: ["gunicorn", "--worker-class", "eventlet", "--workers", "1", "--timeout", "120", "--bind", "0.0.0.0:9090", "--access-logfile", "-", "--error-logfile", "-", "--log-level", "info", "app:app"]
        ports:
        - containerPort: 9090
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-0.kafka.default.svc.cluster.local:9092"
        - name: KAFKA_TOPIC
          value: "test-topic"
        - name: KAFKA_GROUP_ID
          value: "test-consumer-group"
        - name: APP_MODE
          value: "consumer"
        - name: PYTHONUNBUFFERED
          value: "1"
        livenessProbe:
          httpGet:
            path: /status
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-consumer
spec:
  selector:
    app: kafka-consumer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9090
  type: LoadBalancer 